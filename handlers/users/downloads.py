from io import BytesIO

from aiogram import types
from aiogram.types import InputFile
from aiogram.utils.exceptions import NetworkError, InvalidQueryID, BadRequest

from handlers.users.chosen_links import get_book_description
from keyboards.inline.other_keyboards import files_call
from loader import dp, db, bot

from utils.throttlig import rate_limit


def get_callback_data(callback_data: dict):
    if callback_data['format_file'] not in ['fb2', 'epub', 'mobi']:
        format_file = 'download'
    else:
        format_file = callback_data['format_file']

    link = callback_data["link"]
    return format_file, link


@rate_limit(limit=5, key='downloading')
@dp.callback_query_handler(files_call.filter())
async def download_book(call: types.CallbackQuery, callback_data: dict):
    format_file, link = get_callback_data(callback_data)

    url = f'http://flibusta.is{link}/{format_file}'
    book, author, *args = await get_book_description(link)

    file_id = await db.select_file_id(link=link, format=format_file)
    message = await call.message.reply(f'–û–∂–∏–¥–∞–π—Ç–µ, –Ω–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞—Ç—å –∫–Ω–∏–≥—É üôÉ')
    if file_id:
        try:
            await call.message.answer_document(file_id, caption=author)
            await call.answer()
        except BadRequest:
            pass
        except TimeoutError:
            pass
    else:
        file = await get_file(message, callback_data['format_file'], url, book)
        if not file: return

        try:
            future_file_id = await call.message.answer_document(file, caption=author)
            await call.answer()
            file_id = future_file_id.document.file_id

        except NetworkError:  # –õ–æ–≤–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 50 –º–µ—Ç—Ä–æ–≤
            return await message.edit_text(f'–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ç.–∫. –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω—á–∏–Ω–∏—è –ø–æ –≤–µ—Å—É —Ñ–∞–π–ª–æ–≤üòî\n'
                                           f'–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ:\n'
                                           f'{url}')
        except InvalidQueryID:  # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫—É
            pass

        await db.insert_file_id(link=link, format=format_file, file_id=file_id)

    await db.update_count(table='books', column='downloaded', link=link)  # –∫–æ–ª-–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    await db.update_user_downloads(user_id=call.from_user.id) # –∫–æ–ª-–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —É —é–∑–µ—Ä–∞
    await db.add_user(user=message.from_user.full_name, telegram_id=message.from_user.id)
    await message.delete()



async def get_file(message: types.Message, format_file: str, url: str, book: str):
    '''
    –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    '''
    response = await bot.get('session').get_tempfile(url)

    try:
        res_to_bytesio = BytesIO(response.read())  # –∫–æ–Ω–≤–µ–Ω—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        file = InputFile(path_or_bytesio=res_to_bytesio, filename=f'{book}.{format_file}')

    except AttributeError:

        await message.edit_text('–£–ø—Å! –í–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üò≤\n'
                                       '–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ üôå\n')
        return
    finally:
        if response: response.close()

    return file
